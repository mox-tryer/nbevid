/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mox.nbevid.explorer.editors;


import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Objects;
import javax.swing.AbstractAction;
import javax.swing.Action;
import static javax.swing.Action.SHORT_DESCRIPTION;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.AbstractTableModel;
import mox.nbevid.explorer.NbEvidExplorerTopComponent;
import mox.nbevid.explorer.nodes.DbInfo;
import mox.nbevid.model.Item;
import mox.nbevid.model.ItemType;
import mox.nbevid.model.SpendingsDatabase;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewDescription;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.swing.etable.ETable;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.UndoRedo;
import org.openide.util.HelpCtx;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;


/**
 *
 * @author martin
 */
public class DbItemsEditorPanel extends javax.swing.JPanel implements MultiViewElement {
  private static final long serialVersionUID = 1L;

  private MultiViewElementCallback callback;

  private final JToolBar toolbar = new JToolBar();

  private final SpendingsDatabase db;
  private final DbInfo dbInfo;
  private final Lookup lookup;

  private final DataTable table;
  private final ItemsTableModel tableModel;

  private final AddItemAction addItemAction = new AddItemAction();
  private final RemoveItemAction removeItemAction = new RemoveItemAction();

  /**
   * Creates new form DbItemsEditorPanel
   */
  public DbItemsEditorPanel(SpendingsDatabase db, DbInfo dbInfo) {
    this.db = db;
    this.dbInfo = dbInfo;
    this.lookup = Lookups.fixed(db, dbInfo);

    initComponents();

    toolbar.addSeparator();
    toolbar.add(addItemAction);
    toolbar.add(removeItemAction);

    tableModel = new ItemsTableModel(db, dbInfo);
    table = new DataTable(tableModel);
    initTable();
    itemsTableScrollPane.setViewportView(table);
  }

  private void initTable() {
    table.setFont(table.getFont().deriveFont(15f));
    
    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    table.setAutoResizeMode(DataTable.AUTO_RESIZE_OFF);
    table.setCellSelectionEnabled(false);
    table.setColumnSelectionOn(MouseEvent.BUTTON3, ETable.ColumnSelection.NO_SELECTION);

    table.adjustColumns();

    table.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
      int index = e.getFirstIndex();
      Item item = (index < 0) ? null : tableModel.getItem(index);
      removeItemAction.checkItem(item);
    });
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
   * Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    itemsTableScrollPane = new javax.swing.JScrollPane();

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(itemsTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(itemsTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  @Override
  public JComponent getVisualRepresentation() {
    return this;
  }

  @Override
  public JComponent getToolbarRepresentation() {
    return toolbar;
  }

  @Override
  public Action[] getActions() {
    return callback.createDefaultActions();
  }

  @Override
  public Lookup getLookup() {
    return lookup;
  }

  @Override
  public void componentOpened() {
  }

  @Override
  public void componentClosed() {
  }

  @Override
  public void componentShowing() {
  }

  @Override
  public void componentHidden() {
  }

  @Override
  public void componentActivated() {
  }

  @Override
  public void componentDeactivated() {
  }

  @Override
  public UndoRedo getUndoRedo() {
    return UndoRedo.NONE;
  }

  @Override
  public void setMultiViewCallback(MultiViewElementCallback callback) {
    this.callback = callback;
  }

  @Override
  public CloseOperationState canCloseElement() {
    return CloseOperationState.STATE_OK;
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane itemsTableScrollPane;
  // End of variables declaration//GEN-END:variables

  public static final class Description implements MultiViewDescription, java.io.Serializable {
    private static final long serialVersionUID = 1L;
    private final Image icon;
    private final SpendingsDatabase db;
    private final DbInfo dbInfo;

    public Description(Image icon, SpendingsDatabase db, DbInfo dbInfo) {
      this.icon = icon;
      this.db = db;
      this.dbInfo = dbInfo;
    }

    @Override
    public int getPersistenceType() {
      return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public String getDisplayName() {
      return "Items";
    }

    @Override
    public Image getIcon() {
      return icon;
    }

    @Override
    public HelpCtx getHelpCtx() {
      return null;
    }

    @Override
    public String preferredID() {
      return "DbItemsEditor";
    }

    @Override
    public MultiViewElement createElement() {
      return new DbItemsEditorPanel(db, dbInfo);
    }
  }


  @NbBundle.Messages({"COL_ItemId=Id", "COL_ItemName=Name", "COL_ItemType=Type"})
  private class ItemsTableModel extends AbstractTableModel {
    private static final long serialVersionUID = 1L;

    private final SpendingsDatabase db;
    private final DbInfo dbInfo;
    private final ArrayList<Integer> index = new ArrayList<>();

    public ItemsTableModel(SpendingsDatabase db, DbInfo dbInfo) {
      this.db = db;
      this.dbInfo = dbInfo;

      index.addAll(db.getAllItems().keySet());
      index.sort(null);
    }

    @Override
    public int getRowCount() {
      return index.size();
    }

    @Override
    public int getColumnCount() {
      return 3;
    }

    @Override
    public String getColumnName(int columnIndex) {
      switch (columnIndex) {
        case 0:
          return Bundle.COL_ItemId();
        case 1:
          return Bundle.COL_ItemName();
        case 2:
          return Bundle.COL_ItemType();
        default:
          return "???";
      }
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
      switch (columnIndex) {
        case 0:
          return Integer.class;
        default:
          return String.class;
      }
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
      Item item = getItem(rowIndex);

      switch (columnIndex) {
        case 0:
          return item.getItemId();
        case 1:
          return item.getItemName();
        case 2:
          return NbBundle.getMessage(NbEvidExplorerTopComponent.class, "LBL_ItemType_" + item.getItemType().name());
        default:
          return "???";
      }
    }

    public Item getItem(int rowIndex) {
      return db.getAllItems().get(index.get(rowIndex));
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
      Item item = getItem(rowIndex);

      if ((columnIndex == 1) && (aValue instanceof String)) {
        String oldValue = item.getItemName();
        String newValue = (String) aValue;
        item.setItemName(newValue);
        if (!Objects.equals(oldValue, newValue)) {
          dbInfo.dbChanged();
        }
      }
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
      // len nazov
      return columnIndex == 1;
    }

    private void addItem(String itemName, ItemType itemType) {
      // spolieham sa na zosortovany index
      final int lastItemId = index.isEmpty() ? 0 : index.get(index.size() - 1);
      int newItemId = lastItemId + 1;

      Item newItem = new Item(newItemId, itemName, itemType);
      db.addItem(newItem);
      index.add(newItemId);
      // nie je potrebne sortovat, nakolko novy item ma najvacsi ID a je pridany na koniec
      fireTableRowsInserted(index.size() - 1, index.size() - 1);
      dbInfo.dbChanged();
    }
    
    private void removeItem(Item item) {
      // najst index
      int itemIndex = -1;
      for (int i = 0; i < index.size(); i++) {
        int id = index.get(i);
        if (id == item.getItemId()) {
          itemIndex = i;
          break;
        }
      }
      
      if (itemIndex >= 0) {
        db.removeItem(item);
        index.remove(itemIndex);
        fireTableRowsDeleted(itemIndex, itemIndex);
        dbInfo.dbChanged();
      }
    }
  }


  @NbBundle.Messages({"LBL_AddItemAction=Add Item", "LBL_AddItemTitle=New Item"})
  private class AddItemAction extends AbstractAction {
    private static final long serialVersionUID = 1L;

    @SuppressWarnings("OverridableMethodCallInConstructor")
    public AddItemAction() {
      super(null, ImageUtilities.loadImageIcon("mox/nbevid/explorer/resources/add.png", false));
      putValue(SHORT_DESCRIPTION, Bundle.LBL_AddItemAction());
    }

    @Override
    public void actionPerformed(ActionEvent e) {
      final NewItemPanel panel = new NewItemPanel();
      final DialogDescriptor dd = new DialogDescriptor(panel, Bundle.LBL_AddItemTitle());
      panel.addChangeListener((chEv) -> dd.setValid(panel.validateValues()));
      dd.setValid(panel.validateValues());
      if (DialogDisplayer.getDefault().notify(dd).equals(DialogDescriptor.OK_OPTION)) {
        tableModel.addItem(panel.getItemName(), panel.getItemType());
      }
    }
  }


  @NbBundle.Messages({
    "LBL_RemoveItemAction=Remove Item",
    "LBL_RemoveItemTitle=Remove Item",
    "# {0} - item name",
    "LBL_RemoveConfirmation=Do you want to remove item {0}?"
  })
  private class RemoveItemAction extends AbstractAction {
    private static final long serialVersionUID = 1L;

    @SuppressWarnings("OverridableMethodCallInConstructor")
    public RemoveItemAction() {
      super(null, ImageUtilities.loadImageIcon("mox/nbevid/explorer/resources/remove.png", false));
      putValue(SHORT_DESCRIPTION, Bundle.LBL_RemoveItemAction());
      setEnabled(false);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
      int selectedRow = table.getSelectedRow();
      if (selectedRow < 0) {
        return;
      }
      Item selectedItem = tableModel.getItem(selectedRow);
      if (selectedItem == null) {
        return;
      }
      final NotifyDescriptor nd = new NotifyDescriptor.Confirmation(Bundle.LBL_RemoveConfirmation(selectedItem.getItemName()), Bundle.LBL_RemoveItemTitle(),
              NotifyDescriptor.Confirmation.YES_NO_OPTION);
      if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.YES_OPTION) {
        tableModel.removeItem(selectedItem);
      }
    }

    private void checkItem(Item item) {
      if (item == null) {
        setEnabled(false);
      } else {
        setEnabled(item.getYearUsageCount() == 0);
      }
    }
  }
}
